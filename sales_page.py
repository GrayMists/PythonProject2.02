import streamlit as st
import pandas as pd
from utils import supabase  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∫–ª—ñ—î–Ω—Ç Supabase –∑ –¥–æ–ø–æ–º—ñ–∂–Ω–æ–≥–æ —Ñ–∞–π–ª—É


# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞–Ω–∏–º–∏ ---

@st.cache_data(ttl=3600)
def fetch_all_sales_data(territory: str, line: str, months: list) -> pd.DataFrame:
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –í–°–Ü –¥–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ sales_data, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é.
    """
    all_data = []
    offset = 0
    page_size = 1000

    select_query = "client, product_name, quantity, city, street, house_number, territory, adding, product_line, delivery_address, year, month, decade"

    while True:
        try:
            query = supabase.table("sales_data").select(select_query).range(offset, offset + page_size - 1)

            if territory != "–í—Å—ñ":
                query = query.eq("territory", territory)
            if line != "–í—Å—ñ":
                query = query.eq("product_line", line)
            if months:  # `months` - —Ü–µ –Ω–∞—à —Å–ø–∏—Å–æ–∫ —Ä—è–¥–∫—ñ–≤, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ ['1', '5']
                query = query.in_("month", months)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ .in_()

            response = query.execute()

            if response.data:
                all_data.extend(response.data)
                if len(response.data) < page_size:
                    break
                offset += page_size
            else:
                break
        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∑ Supabase: {e}")
            return pd.DataFrame()

    return pd.DataFrame(all_data)


# --- –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ---

def show():
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å—Ç–æ—Ä—ñ–Ω–∫—É "–ü—Ä–æ–¥–∞–∂—ñ" –∑ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ —Ç–∞ –≤–∫–ª–∞–¥–∫–∞–º–∏."""
    st.set_page_config(page_title="–ê–Ω–∞–ª—ñ–∑ –ü—Ä–æ–¥–∞–∂—ñ–≤", layout="centered")

    st.title("üìä –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥–∞–∂—ñ–≤")
    st.write(
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ—ñ–ª—å—Ç—Ä–∏ –Ω–∞ –±—ñ—á–Ω—ñ–π –ø–∞–Ω–µ–ª—ñ, —â–æ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ, –∞ –ø–æ—Ç—ñ–º —Ñ—ñ–ª—å—Ç—Ä—É–π—Ç–µ —ó—Ö –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ —É –≤–∫–ª–∞–¥–∫–∞—Ö.")

    # --- –û—Å–Ω–æ–≤–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ –≤–∫–ª–∞–¥–∫–∞–º–∏ ---
    tab1, tab2 = st.tabs(["–ó–∞–≥–∞–ª—å–Ω—ñ –ø—Ä–æ–¥–∞–∂—ñ", "–î–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ –∞–¥—Ä–µ—Å–∞—Ö"])

    # --- –í–ö–õ–ê–î–ö–ê 1: –ó–∞–≥–∞–ª—å–Ω—ñ –ø—Ä–æ–¥–∞–∂—ñ ---
    with tab1:
        st.header("–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–≥–ª—è–¥ –ø—Ä–æ–¥–∞–∂—ñ–≤")

        if 'sales_df_full' in st.session_state and not st.session_state.sales_df_full.empty:
            df_full = st.session_state['sales_df_full']

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ª–æ–Ω–∫—É –∞–¥—Ä–µ—Å–∏ —É df_full (—è–∫ —É df_display_client)
            df_full['full_address_processed'] = (
                df_full['city'].astype(str).fillna('') + ", " +
                df_full['street'].astype(str).fillna('') + ", " +
                df_full['house_number'].astype(str).fillna('')
            ).str.strip(' ,')


            # 1. –§—ñ–ª—å—Ç—Ä—É—î–º–æ –¥–∞–Ω—ñ, –∑–∞–ª–∏—à–∞—é—á–∏ —Ç—ñ–ª—å–∫–∏ —Ç—ñ, –¥–µ 'decade' –¥–æ—Ä—ñ–≤–Ω—é—î 30
            df_decade_30 = df_full[df_full['decade'] == "30"].copy()

            # 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –¥–∞–Ω—ñ –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
            if df_decade_30.empty:
                st.warning("–£ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î –ø—Ä–æ–¥–∞–∂—ñ–≤ –∑–∞ '30-—Ç—É' –¥–µ–∫–∞–¥—É.")
            else:
                # –ü–æ–¥–∞–ª—å—à–∏–π –∫–æ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î df_decade_30 –∑–∞–º—ñ—Å—Ç—å df_full
                st.markdown("##### –õ–æ–∫–∞–ª—å–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏")
                filter_cols_general = st.columns(2)
                with filter_cols_general[0]:
                    unique_cities = ["–í—Å—ñ"] + sorted(df_decade_30['city'].dropna().unique().tolist())
                    selected_city = st.selectbox("–ú—ñ—Å—Ç–æ:", unique_cities, key="tab1_city_filter")

                with filter_cols_general[1]:
                    if selected_city != "–í—Å—ñ":
                        streets_in_city = df_decade_30[df_decade_30['city'] == selected_city][
                            'street'].dropna().unique()
                        unique_streets = ["–í—Å—ñ"] + sorted(streets_in_city.tolist())
                    else:
                        unique_streets = ["–í—Å—ñ"] + sorted(df_decade_30['street'].dropna().unique().tolist())
                    selected_street = st.selectbox("–í—É–ª–∏—Ü—è:", unique_streets, key="tab1_street_filter")

                st.markdown("---")

                df_display = df_decade_30.copy()
                if selected_city != "–í—Å—ñ": df_display = df_display[df_display['city'] == selected_city]
                if selected_street != "–í—Å—ñ": df_display = df_display[df_display['street'] == selected_street]

                st.subheader("–ö–ª—é—á–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏")
                total_quantity = int(pd.to_numeric(df_display['quantity'], errors='coerce').sum())
                top_products = df_display.groupby('product_name')['quantity'].sum().sort_values(ascending=False).head(5)
                rev_top_products = df_display.groupby('product_name')['quantity'].sum().sort_values(ascending=True).head(5)
                # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–æ–≤–∏—Ö –º–µ—Ç—Ä–∏–∫
                unique_products = df_display['product_name'].nunique()
                # –§–æ—Ä–º—É—î–º–æ –æ–±'—î–¥–Ω–∞–Ω—É –∞–¥—Ä–µ—Å—É
                df_display['full_address'] = (
                    df_display['city'].astype(str).fillna('') + ", " +
                    df_display['street'].astype(str).fillna('') + ", " +
                    df_display['house_number'].astype(str).fillna('')
                ).str.strip(', ')
                unique_clients = df_display['full_address'].nunique()
                avg_quantity_per_client = total_quantity / unique_clients if unique_clients else 0
                # –î–æ–¥–∞–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞: —á–∞—Å—Ç–∫–∞ –¢–û–ü-5 –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —É –∑–∞–≥–∞–ª—å–Ω–æ–º—É –æ–±—Å—è–∑—ñ
                top5_total = top_products.sum()
                top5_share = top5_total / total_quantity * 100 if total_quantity else 0
                # KPI-–∫–∞—Ä—Ç–∫–∏ –≤ –¥–≤–∞ —Ä—è–¥–∏ –ø–æ 3 –∫–æ–ª–æ–Ω–∫–∏
                kpi_row1 = st.columns(3)
                kpi_row2 = st.columns(3)

                with kpi_row1[0]:
                    st.markdown(f"""
                        <div style="height: 140px; margin: 10px; padding: 1rem; border-radius: 10px; background-color: #f4f4f4; text-align: center; border: 1px solid #ddd; display: flex; flex-direction: column; justify-content: center;">
                            <div style="font-size: 14px; color: #555;">–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–Ω–∏—Ö —É–ø–∞–∫–æ–≤–æ–∫</div>
                            <div style="font-size: 32px; font-weight: bold; color: #f45b00;">{total_quantity:,}</div>
                        </div>
                    """, unsafe_allow_html=True)

                with kpi_row1[1]:
                    st.markdown(f"""
                        <div style="height: 140px; margin: 10px; padding: 1rem; border-radius: 10px; background-color: #f4f4f4; text-align: center; border: 1px solid #ddd; display: flex; flex-direction: column; justify-content: center;">
                            <div style="font-size: 14px; color: #555;">–£–Ω—ñ–∫–∞–ª—å–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏</div>
                            <div style="font-size: 28px; font-weight: bold; color: #3366cc;">{unique_products}</div>
                        </div>
                    """, unsafe_allow_html=True)

                with kpi_row1[2]:
                    st.markdown(f"""
                        <div style="height: 140px; margin: 10px; padding: 1rem; border-radius: 10px; background-color: #f4f4f4; text-align: center; border: 1px solid #ddd; display: flex; flex-direction: column; justify-content: center;">
                            <div style="font-size: 14px; color: #555;">–£–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏</div>
                            <div style="font-size: 28px; font-weight: bold; color: #3366cc;">{unique_clients}</div>
                        </div>
                    """, unsafe_allow_html=True)

                with kpi_row2[0]:
                    st.markdown(f"""
                        <div style="height: 140px; margin: 10px; padding: 1rem; border-radius: 10px; background-color: #f4f4f4; text-align: center; border: 1px solid #ddd; display: flex; flex-direction: column; justify-content: center;">
                            <div style="font-size: 14px; color: #555;">–°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞ –∫–ª—ñ—î–Ω—Ç–∞</div>
                            <div style="font-size: 28px; font-weight: bold; color: #3366cc;">{avg_quantity_per_client:.1f}</div>
                        </div>
                    """, unsafe_allow_html=True)

                with kpi_row2[1]:
                    st.markdown(f"""
                        <div style="height: 140px; margin: 10px; padding: 1rem; border-radius: 10px; background-color: #f4f4f4; text-align: center; border: 1px solid #ddd; display: flex; flex-direction: column; justify-content: center;">
                            <div style="font-size: 14px; color: #555;">–ß–∞—Å—Ç–∫–∞ –¢–û–ü-5 –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —É –∑–∞–≥–∞–ª—å–Ω–æ–º—É –æ–±—Å—è–∑—ñ (%)</div>
                            <div style="font-size: 28px; font-weight: bold; color: #3366cc;">{top5_share:.1f}%</div>
                        </div>
                    """, unsafe_allow_html=True)

                with kpi_row2[2]:
                    # –ú–æ–∂–Ω–∞ –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º –∞–±–æ –¥–æ–¥–∞—Ç–∏ —ñ–Ω—à—É –º–µ—Ç—Ä–∏–∫—É –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É
                    st.markdown("")

                # –¢–∞–±–ª–∏—Ü—ñ –¢–û–ü-5 –≤–∏–Ω–µ—Å–µ–Ω—ñ –≤ –æ–∫—Ä–µ–º–∏–π —Ä—è–¥–æ–∫ –∑ –¥–≤–æ–º–∞ –∫–æ–ª–æ–Ω–∫–∞–º–∏
                kpi_row3 = st.columns(2)

                with kpi_row3[0]:
                    st.markdown("**–¢–û–ü-5 –Ω–∞–π–±—ñ–ª—å—à –ø—Ä–æ–¥–∞–≤–∞–Ω–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤:**")
                    st.dataframe(top_products.reset_index().rename(columns={'quantity': '–ö—ñ–ª—å–∫—ñ—Å—Ç—å'}), hide_index=True)

                with kpi_row3[1]:
                    st.markdown("**–¢–û–ü-5 –Ω–∞–π–º–µ–Ω—à –ø—Ä–æ–¥–∞–≤–∞–Ω–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤:**")
                    st.dataframe(rev_top_products.reset_index().rename(columns={'quantity': '–ö—ñ–ª—å–∫—ñ—Å—Ç—å'}), hide_index=True)

                st.markdown("---")
                st.subheader("–î–µ—Ç–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ")
                col1, col2 = st.columns(2)
                with col1:
                    st.markdown("**–ó–≤–µ–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü—è: –ú—ñ—Å—Ç–∞**")
                    st.dataframe(
                        df_display.groupby('city', as_index=False)['quantity']
                        .sum()
                        .sort_values(by='quantity', ascending=False)
                        .rename(columns={'city': '–ú—ñ—Å—Ç–æ', 'quantity': '–ö—ñ–ª—å–∫—ñ—Å—Ç—å'}),
                        hide_index=True
                    )
                with col2:
                    st.markdown("**–ó–≤–µ–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü—è: –í—É–ª–∏—Ü—ñ —Ç–∞ –ü—Ä–æ–¥—É–∫—Ç–∏**")
                    st.dataframe(
                        df_display.groupby('street', as_index=False)['quantity']
                        .sum()
                        .sort_values(by='quantity', ascending=False)
                        .rename(columns={'street': '–í—É–ª–∏—Ü—è', 'quantity': '–ö—ñ–ª—å–∫—ñ—Å—Ç—å'}),
                        hide_index=True
                    )
                st.markdown("**–ó–≤–µ–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü—è: –ü—Ä–æ–¥—É–∫—Ç–∏**")
                st.dataframe(
                    df_display.groupby('product_name', as_index=False)['quantity']
                        .sum()
                        .sort_values(by='quantity', ascending=False)
                        .rename(columns={'product_name': '–ü—Ä–æ–¥—É–∫—Ç', 'quantity': '–ö—ñ–ª—å–∫—ñ—Å—Ç—å'}),
                    hide_index=True
                )

                # --- –î–æ–¥–∞—î–º–æ –∑–≤–µ–¥–µ–Ω—É —Ç–∞–±–ª–∏—Ü—é –ø–æ –º—ñ—Å—Ç—É √ó –ø—Ä–æ–¥—É–∫—Ç—É ---
                st.subheader("–ó–≤–µ–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü—è: –ú—ñ—Å—Ç–∞ —Ç–∞ –ü—Ä–æ–¥—É–∫—Ç–∏")
                city_product_pivot = df_display.pivot_table(
                    index='city',
                    columns='product_name',
                    values='quantity',
                    aggfunc='sum',
                    fill_value=0
                )

                def highlight_positive(val):
                    return 'background-color: #355E3B' if val > 0 else ''

                st.dataframe(city_product_pivot.style.applymap(highlight_positive))



        else:
            st.info("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—å—Ç—Ä–∏ –Ω–∞ –±—ñ—á–Ω—ñ–π –ø–∞–Ω–µ–ª—ñ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ'.")

    # --- –í–ö–õ–ê–î–ö–ê 2: –ö–ª—ñ—î–Ω—Ç—Å—å–∫—ñ –ø—Ä–æ–¥–∞–∂—ñ ---
    with tab2:
        st.header("–î–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∞–¥—Ä–µ—Å–∞—Ö")

        if 'sales_df_full' in st.session_state and not st.session_state.sales_df_full.empty:
            df_full = st.session_state['sales_df_full']

            st.markdown("##### –õ–æ–∫–∞–ª—å–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏")
            filter_cols_client = st.columns(2)
            with filter_cols_client[0]:
                unique_cities_client = ["–í—Å—ñ"] + sorted(df_full['city'].dropna().unique().tolist())
                selected_city_client = st.selectbox("–ú—ñ—Å—Ç–æ:", unique_cities_client, key="tab2_city_filter")

            with filter_cols_client[1]:
                if selected_city_client != "–í—Å—ñ":
                    streets_in_city_client = df_full[df_full['city'] == selected_city_client][
                        'street'].dropna().unique()
                    unique_streets_client = ["–í—Å—ñ"] + sorted(streets_in_city_client.tolist())
                else:
                    unique_streets_client = ["–í—Å—ñ"] + sorted(df_full['street'].dropna().unique().tolist())
                selected_street_client = st.selectbox("–í—É–ª–∏—Ü—è:", unique_streets_client, key="tab2_street_filter")

            st.markdown("---")

            apply_filters_client = st.button("–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏", key="tab2_apply_button")

            if apply_filters_client:
                # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –¥–∞–Ω—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ª–æ–∫–∞–ª—å–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
                df_display_client = df_full.copy()
                if selected_city_client != "–í—Å—ñ":
                    df_display_client = df_display_client[df_display_client['city'] == selected_city_client]
                if selected_street_client != "–í—Å—ñ":
                    df_display_client = df_display_client[df_display_client['street'] == selected_street_client]

                # --- –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞–ø—É –∞–¥—Ä–µ—Å–∞ ‚Üí –∫–ª—ñ—î–Ω—Ç–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö ---
                address_clients_map = (
                    df_full.groupby('full_address_processed')['client']
                    .unique()
                    .apply(lambda x: ', '.join(sorted(x[:3])) + ('...' if len(x) > 3 else ''))
                    .to_dict()
                )

                # --- –Ü–ù–¢–ï–ì–†–û–í–ê–ù–ò–ô –ë–õ–û–ö –†–û–ó–†–ê–•–£–ù–ö–£ –§–ê–ö–¢–ò–ß–ù–ò–• –ü–†–û–î–ê–ñ–Ü–í ---

                # 1. –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—É –ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É –¥–ª—è –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è
                df_display_client['full_address_processed'] = (df_display_client['city'].astype(str).fillna('') + ", " + \
                                                               df_display_client['street'].astype(str).fillna(
                                                                   '') + ", " + \
                                                               df_display_client['house_number'].astype(str).fillna(
                                                                   '')).str.strip(' ,')

                # –í–∏–¥–∞–ª—è—î–º–æ —Ä—è–¥–∫–∏, –¥–µ –∞–¥—Ä–µ—Å–∞ –Ω–µ –∑–º–æ–≥–ª–∞ —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏—Å—å
                df_display_client = df_display_client[df_display_client['full_address_processed'] != '']

                # 2. –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
                grouping_cols = ['client', 'product_name', 'full_address_processed', 'year', 'month']

                # 3. –°–æ—Ä—Ç—É—î–º–æ –¥–∞–Ω—ñ, —â–æ–± –¥–µ–∫–∞–¥–∏ –π—à–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
                df_display_client = df_display_client.sort_values(by=grouping_cols + ['decade'])

                # 4-6. –ö–æ—Ä–µ–∫—Ç–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ñ–∞–∫—Ç–∏—á–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º—ñ–∂ –¥–µ–∫–∞–¥–∞–º–∏
                def compute_actual(group):
                    # –ê–≥—Ä–µ–≥—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –¥–µ–∫–∞–¥–∞—Ö, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è
                    group_agg = group.groupby(['product_name', 'full_address_processed', 'year', 'month', 'decade'])['quantity'].sum().reset_index()

                    pivot = group_agg.pivot(index=['product_name', 'full_address_processed', 'year', 'month'],
                                            columns='decade',
                                            values='quantity').fillna(0)

                    pivot['fact_30'] = pivot.get('30', 0) - (pivot.get('20', 0) if '20' in pivot else pivot.get('10', 0))
                    pivot['fact_20'] = pivot.get('20', 0) - pivot.get('10', 0)
                    pivot['fact_10'] = pivot.get('10', 0)

                    result = pivot[['fact_10', 'fact_20', 'fact_30']].stack().reset_index()
                    result.columns = ['product_name', 'full_address_processed', 'year', 'month', 'decade', 'actual_quantity']
                    result['decade'] = result['decade'].str.replace('fact_', '')
                    return result

                grouped_actual = df_display_client.groupby(['product_name', 'full_address_processed', 'year', 'month'])
                df_display_client = grouped_actual.apply(compute_actual).reset_index(drop=True)

                # --- –ö–Ü–ù–ï–¶–¨ –Ü–ù–¢–ï–ì–†–û–í–ê–ù–û–ì–û –ë–õ–û–ö–£ ---

                # –ì—Ä—É–ø—É—î–º–æ –≤–∂–µ –æ–±—Ä–∞—Ö–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –ø–æ –∞–¥—Ä–µ—Å—ñ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                grouped = df_display_client.groupby('full_address_processed')

                if grouped.ngroups == 0:
                    st.warning("–ó–∞ –æ–±—Ä–∞–Ω–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–∏—Ö.")
                else:
                    st.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {grouped.ngroups} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∞–¥—Ä–µ—Å.")

                    for full_address, group in grouped:
                        client_names = address_clients_map.get(full_address, "")
                        expander_title = f"**{full_address}** ‚Äì {client_names}"

                        with st.expander(expander_title):
                            # KPI –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∞–¥—Ä–µ—Å–∏ (–û–ù–û–í–õ–ï–ù–û)
                            kpi_col1, kpi_col2 = st.columns(2)
                            # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Å—É–º—É —Ñ–∞–∫—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ–¥–∞–∂—ñ–≤ —É —Ä–æ–∑—Ä—ñ–∑—ñ –º—ñ—Å—è—Ü—ñ–≤
                            monthly_sums = group.groupby(['year', 'month'])['actual_quantity'].sum().reset_index()
                            monthly_sums['year_month'] = monthly_sums['year'].astype(str) + '-' + monthly_sums['month'].astype(str).str.zfill(2)
                            # –ó–º–µ–Ω—à—É—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ç–µ–∫—Å—Ç—É KPI –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é HTML
                            monthly_text_raw = "; ".join([f"{row['year_month']}: {row['actual_quantity']}" for _, row in monthly_sums.iterrows()])
                            monthly_text = f"<span style='font-size: 0.85em'>{monthly_text_raw}</span>"
                            kpi_col1.markdown(f"**–§–∞–∫—Ç–∏—á–Ω—ñ –ø—Ä–æ–¥–∞–∂—ñ –∑–∞ –∞–¥—Ä–µ—Å–æ—é (–∑–∞ –æ–±—Ä–∞–Ω—ñ –ø–µ—Ä—ñ–æ–¥–∏):**<br>{monthly_text}", unsafe_allow_html=True)


                            # –ó–≤–µ–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –∑ "—á–∏—Å—Ç–∏–º–∏" –ø—Ä–æ–¥–∞–∂–∞–º–∏ (–û–ù–û–í–õ–ï–ù–û)
                            st.subheader("–î–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö —Ç–∞ –ø–µ—Ä—ñ–æ–¥–∞—Ö (—Ñ–∞–∫—Ç–∏—á–Ω—ñ –∑–∞–º–≤–æ–ª–µ–Ω–Ω—è)")

                            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –¥–∞–Ω—ñ –¥–ª—è –∑–≤–µ–¥–µ–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
                            if not group.empty:
                                pivot_table = group.pivot_table(
                                    index='product_name',
                                    columns=['year', 'month', 'decade'],
                                    values='actual_quantity',
                                    aggfunc='sum',
                                    fill_value=0
                                )

                                def highlight_positive(val):
                                    return 'background-color: #355E3B' if val > 0 else ''

                                styled_table = pivot_table.style.applymap(highlight_positive)

                                st.dataframe(styled_table)
                            else:
                                st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–≤–µ–¥–µ–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ.")
            else:
                st.info("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏', —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—é.")
        else:
            st.info("–°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º–∞–π—Ç–µ –¥–∞–Ω—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ñ—ñ–ª—å—Ç—Ä–∏ –Ω–∞ –ø–µ—Ä—à—ñ–π –≤–∫–ª–∞–¥—Ü—ñ.")
