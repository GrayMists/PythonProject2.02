import streamlit as st
import pandas as pd
from core import data_processing, ui_components, visualizations


def show():
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å—Ç–æ—Ä—ñ–Ω–∫—É "–ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥–∞–∂—ñ–≤".
    –¶—è —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ–ø–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ç—ñ–ª—å–∫–∏ –∑–∞ –∫–æ–º–ø–æ–Ω—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ.
    """
    st.title("üìä –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥–∞–∂—ñ–≤")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–∞–Ω—ñ –±—É–ª–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –≤ home.py
    if 'sales_df_full' not in st.session_state or st.session_state.sales_df_full.empty:
        st.info("üëà –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—å—Ç—Ä–∏ –Ω–∞ –±—ñ—á–Ω—ñ–π –ø–∞–Ω–µ–ª—ñ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ'.")
        st.stop()

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ —Å–µ—Å—ñ—ó
    df_full = st.session_state.sales_df_full
    # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ª–æ–Ω–∫—É –∑ –ø–æ–≤–Ω–æ—é –∞–¥—Ä–µ—Å–æ—é
    df_full = data_processing.create_full_address(df_full.copy())
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ "–∞–¥—Ä–µ—Å–∞ -> –∫–ª—ñ—î–Ω—Ç–∏" –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —É –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
    address_client_map = data_processing.create_address_client_map(df_full)

    tab1, tab2 = st.tabs(["üìà –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–≥–ª—è–¥", "üè† –î–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ –∞–¥—Ä–µ—Å–∞—Ö"])

    # --- –í–ö–õ–ê–î–ö–ê 1: –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–≥–ª—è–¥ ---
    with tab1:
        st.header("–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–≥–ª—è–¥ –ø—Ä–æ–¥–∞–∂—ñ–≤ –∑–∞ 30-—Ç—É –¥–µ–∫–∞–¥—É")

        # 1. –§—ñ–ª—å—Ç—Ä—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —Ü—ñ—î—ó –≤–∫–ª–∞–¥–∫–∏
        df_decade_30 = df_full[df_full['decade'] == "30"].copy()
        if df_decade_30.empty:
            st.warning("–£ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î –ø—Ä–æ–¥–∞–∂—ñ–≤ –∑–∞ '30-—Ç—É' –¥–µ–∫–∞–¥—É.")
        else:
            # 2. –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ç–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏
            selected_city, selected_street = ui_components.render_local_filters(df_decade_30, key_prefix="tab1")
            df_display = ui_components.apply_filters(df_decade_30, selected_city, selected_street)

            # 3. –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ KPI
            kpis = data_processing.calculate_main_kpis(df_display)

            # 4. –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ KPI
            st.subheader("–ö–ª—é—á–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏")
            kpi_cols = st.columns(4)
            with kpi_cols[0]:
                ui_components.display_kpi_card("–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å", f"{kpis['total_quantity']:,}")
            with kpi_cols[1]:
                ui_components.display_kpi_card("–£–Ω—ñ–∫–∞–ª—å–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏", f"{kpis['unique_products']:,}")
            with kpi_cols[2]:
                ui_components.display_kpi_card("–£–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏", f"{kpis['unique_clients']:,}")
            with kpi_cols[3]:
                ui_components.display_kpi_card("–ß–∞—Å—Ç–∫–∞ –¢–û–ü-5 (%)", f"{kpis['top5_share']:.1f}%")

            st.markdown("---")

            # 5. –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
            visualizations.plot_sales_dynamics(df_display)
            visualizations.plot_top_products_bar_chart(kpis['top_products'], kpis['rev_top_products'])

            # 6. –î–æ–¥–∞—î–º–æ –∑–≤–µ–¥–µ–Ω—É —Ç–∞–±–ª–∏—Ü—é —Ç–∞ —Ç–µ–ø–ª–æ–≤—É –∫–∞—Ä—Ç—É
            st.subheader("–ó–≤–µ–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü—è: –ú—ñ—Å—Ç–∞ —Ç–∞ –ü—Ä–æ–¥—É–∫—Ç–∏")
            df_display = df_display.rename(columns={'city': '–ú—ñ—Å—Ç–æ'})

            city_product_pivot = df_display.pivot_table(
                index='–ú—ñ—Å—Ç–æ',
                columns='product_name',
                values='quantity',
                aggfunc='sum',
                fill_value=0
            )
            city_product_pivot = city_product_pivot.loc[city_product_pivot.sum(axis=1).sort_values(ascending=False).index]

            # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å –≤–∫–∞–∑–∞–Ω–∏–º –∫–æ–ª—å–æ—Ä–æ–º
            def highlight_positive_custom(val):
                color = '#4B6F44' if val > 0 else ''  # –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
                return f'background-color: {color}'

            st.dataframe(city_product_pivot.style.applymap(highlight_positive_custom).format('{:.0f}'))

            with st.expander("–ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–µ–ø–ª–æ–≤—É –∫–∞—Ä—Ç—É –ø—Ä–æ–¥–∞–∂—ñ–≤"):
                visualizations.plot_city_product_heatmap(df_display)

    # --- –í–ö–õ–ê–î–ö–ê 2: –î–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ –∞–¥—Ä–µ—Å–∞—Ö ---
    with tab2:
        st.header("–î–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ–∞–∫—Ç–∏—á–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –ø–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∞–¥—Ä–µ—Å–∞—Ö")

        # 1. –õ–æ–∫–∞–ª—å–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–ª—è —Ü—ñ—î—ó –≤–∫–ª–∞–¥–∫–∏
        city_client, street_client = ui_components.render_local_filters(df_full, key_prefix="tab2")
        df_display_client = ui_components.apply_filters(df_full, city_client, street_client)

        # 2. –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ "—á–∏—Å—Ç—ñ" –ø—Ä–æ–¥–∞–∂—ñ
        with st.spinner("–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ñ–∞–∫—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ–¥–∞–∂—ñ–≤..."):
            df_actual_sales = data_processing.compute_actual_sales(df_display_client)

        if df_actual_sales.empty:
            st.warning("–ó–∞ –æ–±—Ä–∞–Ω–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É.")
        else:
            # 3. –ì—Ä—É–ø—É—î–º–æ –ø–æ –∞–¥—Ä–µ—Å—ñ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –µ–∫—Å–ø–∞–Ω–¥–µ—Ä–∞—Ö
            grouped = df_actual_sales.groupby('full_address')
            st.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {grouped.ngroups} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∞–¥—Ä–µ—Å –∑ —Ñ–∞–∫—Ç–∏—á–Ω–∏–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏.")

            for full_address, group in grouped:
                # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º–µ–Ω–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑—ñ —Å–ª–æ–≤–Ω–∏–∫–∞
                client_names = address_client_map.get(full_address, "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–ª—ñ—î–Ω—Ç")
                expander_title = f"**{full_address}** (–ö–ª—ñ—î–Ω—Ç–∏: *{client_names}*)"

                with st.expander(expander_title):
                    total_actual_quantity = group['actual_quantity'].sum()
                    st.metric("–í—Å—å–æ–≥–æ —Ñ–∞–∫—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ–¥–∞–∂—ñ–≤ –∑–∞ –∞–¥—Ä–µ—Å–æ—é:", f"{total_actual_quantity:,}")

                    # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∞–¥—Ä–µ—Å–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
                    st.markdown("**–¢–æ—á–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞ —Ü—ñ—î—é –∞–¥—Ä–µ—Å–æ—é:**")
                    original_rows = df_display_client[df_display_client['full_address'] == full_address]
                    unique_delivery_addresses = original_rows['delivery_address'].dropna().unique()

                    if len(unique_delivery_addresses) > 0:
                        for addr in sorted(unique_delivery_addresses):
                            st.markdown(f"- {addr}")
                    else:
                        st.markdown("- *–ê–¥—Ä–µ—Å–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ*")

                    st.markdown("---")

                    # –ó–≤–µ–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –∑ "—á–∏—Å—Ç–∏–º–∏" –ø—Ä–æ–¥–∞–∂–∞–º–∏
                    st.markdown("**–î–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö —Ç–∞ –ø–µ—Ä—ñ–æ–¥–∞—Ö (—Ñ–∞–∫—Ç–∏—á–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è)**")
                    pivot_table = group.pivot_table(
                        index='product_name',
                        columns=['year', 'month', 'decade'],
                        values='actual_quantity',
                        aggfunc='sum',
                        fill_value=0
                    )

                    # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
                    def highlight_positive(val):
                        color = '#a8d08d' if val > 0 else ''  # –°–≤—ñ—Ç–ª–æ-–∑–µ–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
                        return f'background-color: {color}'

                    st.dataframe(pivot_table.style.applymap(highlight_positive).format('{:.0f}'))
